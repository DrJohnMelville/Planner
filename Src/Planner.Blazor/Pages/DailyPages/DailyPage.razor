@page "/DailyPage/{DateString}"
@using Planner.Models.Repositories
@using Planner.Models.Tasks
@using NodaTime
@using Planner.Blazor.ModalComponent
@using Planner.Models.Time
@inject ILocalRepository<PlannerTask> taskStore;
@inject ModalService ModalService
<div class="CenterWithSides">
<a href="/DailyPage/@RelativeDateString(-1)"><span class="oi oi-caret-left" aria-hidden="true"></span></a>
<a @onclick="ShowDatePicker"><h3>@date</h3></a> 
<a href="/DailyPage/@RelativeDateString(1)"><span class="oi oi-caret-right" aria-hidden="true"></span></a>
</div>
<table>
    @if (tasks != null)
    {
        @foreach (var task in tasks)
        {
            <tr>
                <td><span class="@ClassFromStatus(task.Status)" aria-hidden="true"></span></td>
                <td>@task.PriorityDisplay</td>
                <td>@task.Name</td>
            </tr>
        }
    }

</table>

@code {

    [Parameter]
    public string DateString { get; set; } = "";

    private LocalDate date;
    
    private IListPendingCompletion<PlannerTask>? tasks;
    protected override Task OnParametersSetAsync() => OnInitializedAsync();
    protected override Task OnInitializedAsync()
    {
        tasks = TimeOperations.TryParseLocalDate(DateString, out date) ?
            taskStore.ItemsForDate(date) : null;
        return tasks?.CompleteList() ?? Task.CompletedTask;
    }

    private string ClassFromStatus(PlannerTaskStatus status) =>
        status switch{
            PlannerTaskStatus.Delegated => "oi oi-timer",
            PlannerTaskStatus.Canceled => "oi oi-x",
            PlannerTaskStatus.Deferred => "oi oi-arrow-thick-right",
            PlannerTaskStatus.Pending => "oi oi-media-record",
            PlannerTaskStatus.Done => "oi oi-check",
            _ => "",
            };

    private string RelativeDateString(int delta)
    {
        return date.PlusDays(delta).ToString("yyyy-MM-dd", null);
    }

    private void ShowDatePicker() => ModalService.Show<PickDate>("Date To Display", ("BaseDate", date));

}