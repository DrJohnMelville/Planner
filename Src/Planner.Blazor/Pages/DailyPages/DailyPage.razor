@page "/"
@page "/DailyPage/{DateString}"
@using Planner.Models.Repositories
@using Planner.Models.Tasks
@using NodaTime
@using Planner.Blazor.ModalComponent
@using Planner.Models.Time
@inject ILocalRepository<PlannerTask> taskStore;
@inject ModalService ModalService
@inject IAppNavigation AppNavigation
@inject IClock Clock

<div class="CenterWithSides">
<a href="/DailyPage/@RelativeDateString(-1)"><span class="oi oi-caret-left" aria-hidden="true"></span></a>
<a @onclick="ShowDatePicker"><h3>@date</h3></a> 
<a href="/DailyPage/@RelativeDateString(1)"><span class="oi oi-caret-right" aria-hidden="true"></span></a>
</div>
<table class="TaskTable">
    @if (tasks != null)
    {
        @foreach (var task in tasks.OrderBy(i=>i))
        {
            <tr>
                <td><span class="@ClassFromStatus(task.Status)" aria-hidden="true"></span></td>
                <td>@task.PriorityDisplay</td>
                <td><a href="/TaskDetail/@RelativeDateString(0)/@task.Key">@task.Name</a></td>
            </tr> 
        }
    }

</table>

@code {

    [Parameter]
    public string DateString { get; set; } = "";

    private LocalDate date;
    
    private IListPendingCompletion<PlannerTask>? tasks;
    protected override Task OnParametersSetAsync() => OnInitializedAsync();

    protected override Task OnInitializedAsync()
    {
        SetDate();
        tasks = taskStore.ItemsForDate(date);
        return tasks.CompleteList();
    }

    private void SetDate()
    {
        if (TimeOperations.TryParseLocalDate(DateString, out var ret))
        {
            date = ret;
        }
        else if (DateIsUnset())
        {
            date = Clock.CurrentDate();
        }
    }
    private bool DateIsUnset() => date == new LocalDate();

    private string ClassFromStatus(PlannerTaskStatus status) =>
        status switch{
            PlannerTaskStatus.Delegated => "oi oi-timer",
            PlannerTaskStatus.Canceled => "oi oi-x",
            PlannerTaskStatus.Deferred => "oi oi-arrow-thick-right",
            PlannerTaskStatus.Pending => "oi oi-media-record",
            PlannerTaskStatus.Done => "oi oi-check",
            _ => "",
            };

    private string RelativeDateString(int delta)
    {
        return date.PlusDays(delta).ToString("yyyy-MM-dd", null);
    }

    private void ShowDatePicker() => ModalService.Show<PickDate>("Date To Display", ("BaseDate", date),
        ("PickAction", (Action<LocalDate>)NavigateToNewDate));

    private void NavigateToNewDate(LocalDate newDate) => AppNavigation.ToPlannerPage(newDate);


}