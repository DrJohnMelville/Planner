@page "/"
@page "/DailyPage/{DateString}"
@using Planner.Models.Repositories
@using Planner.Models.Tasks
@using NodaTime
@using Planner.Blazor.ModalComponent
@using Planner.Models.Markdown
@using Planner.Models.Notes
@using Planner.Models.Time
@using Markdig.Renderers.Html
@using Tewr.Blazor.FileReader
@inject ILocalRepository<PlannerTask> taskStore
@inject ILocalRepository<Note> noteStore
@inject ModalService ModalService
@inject IAppNavigation AppNavigation
@inject IUsersClock Clock
@inject IMarkdownTranslator MarkdownTranslator

<div class="CenterWithSides">
    <a href="/DailyPage/@RelativeDateString(-1)">
        <span class="oi oi-caret-left" aria-hidden="true"></span>
    </a>
    <a @onclick="ShowDatePicker">
        <h3>@date</h3>
    </a>
    <a href="/DailyPage/@RelativeDateString(1)">
        <span class="oi oi-caret-right" aria-hidden="true"></span>
    </a>
</div>
<h4>Tasks</h4>
<table class="TaskTable">
    @if (tasks != null)
    {
        @foreach (var task in tasks.OrderBy(i => i))
        {
            <tr>
                <td>
                    <span class="@ClassFromStatus(task.Status)" aria-hidden="true"></span>
                </td>
                <td>@task.PriorityDisplay</td>
                <td>
                    <a href="/TaskDetail/@RelativeDateString(0)/@task.Key">@task.Name</a>
                </td>
            </tr>
        }
        <tr>
            <td></td>
            <td></td>
            <td>
                <div>
                    <input required @bind="newTaskName" placeholder="New Task Name"/>
                    <a class="ShowIfValid" @onclick="CreatePlannerTask">Create Task</a>
                </div>
            </td>
        </tr>
    }
</table>

<h4>Notes</h4>
@if (notes != null)
{
    <ol class="NotesList">
        @foreach (var note in notes.OrderBy(i => i.TimeCreated))
        {
            <li>
                @((MarkupString) MarkdownTranslator.RenderLine(note.Date, note.Title))
                @((MarkupString) MarkdownTranslator.Render(note.Date, note.Text))
            </li>
        }
    </ol>
}
<a href="/NewNote/@date.ToString("yyyy-MM-dd", null)">New Note</a>
<a href="/SearchNote">Search Notes</a>

@code {

    [Parameter]
    public string DateString { get; set; } = "";

    private LocalDate date;

    private IListPendingCompletion<PlannerTask>? tasks;
    private IListPendingCompletion<Note>? notes;

    protected override Task OnParametersSetAsync() => OnInitializedAsync();

    protected override Task OnInitializedAsync()
    {
        SetDate();
        tasks = taskStore.ItemsForDate(date);
        notes = noteStore.ItemsForDate(date);
        return Task.WhenAll(tasks.CompleteList(), notes.CompleteList());
    }

    private void SetDate()
    {
        if (TimeOperations.TryParseLocalDate(DateString, out var ret))
        {
            date = ret;
        }
        else if (DateIsUnset())
        {
            date = Clock.CurrentDate();
        }
    }

    private bool DateIsUnset() => date == new LocalDate();

    private string ClassFromStatus(PlannerTaskStatus status) =>
        status switch{
            PlannerTaskStatus.Delegated => "oi oi-timer",
            PlannerTaskStatus.Canceled => "oi oi-x",
            PlannerTaskStatus.Deferred => "oi oi-arrow-thick-right",
            PlannerTaskStatus.Pending => "oi oi-media-record",
            PlannerTaskStatus.Done => "oi oi-check",
            _ => "",
            };

    private string RelativeDateString(int delta)
    {
        return date.PlusDays(delta).ToString("yyyy-MM-dd", null);
    }

    private void ShowDatePicker() => ModalService.Show<PickDate>("Date To Display", ("BaseDate", date),
        ("PickAction", (Action<LocalDate>) NavigateToNewDate));

    private void NavigateToNewDate(LocalDate newDate) => AppNavigation.ToPlannerPage(newDate);

    private string newTaskName = "";

    private void CreatePlannerTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskName)) return;
        taskStore.CreateItem(date, i => i.Name = newTaskName);
        newTaskName = "";
    }

}