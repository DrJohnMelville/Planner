@page "/TaskDetail/{DateString}/{KeyString}"
@using NodaTime
@using Planner.Blazor.Pages.DailyPages
@using Planner.Models.Repositories
@using Planner.Models.Tasks
@using Planner.Models.Time
@inject ILocalRepository<PlannerTask> taskStore;
@inject IAppNavigation navigation 
@inject ModalService ModalService


@if (dailyList != null && plannerTask != null)
{
    <h3>Task Detail</h3>
    <input @bind="@plannerTask.Name"/>
    <h4>Task Status</h4>
    <ul>
        <li><a @onclick="()=> SetTaskStatus(PlannerTaskStatus.Incomplete)">Incomplete</a></li>
        <li><a @onclick="()=> SetTaskStatus(PlannerTaskStatus.Done)">Completed</a></li>
        <li><a @onclick="()=> SetTaskStatus(PlannerTaskStatus.Canceled)">Cancelled</a></li>
        <li><a @onclick="()=> SetTaskStatus(PlannerTaskStatus.Pending)">Pending</a></li>
        <li><a @onclick="()=> displayType = DisplayType.Delegation">Delegated</a></li>
        @if (displayType == DisplayType.Delegation)
        {
            <div>Delegate Task To:</div>
            <input @bind="@plannerTask.StatusDetail"/>
            <a @onclick="()=> SetTaskStatus(PlannerTaskStatus.Delegated)">Complete Delegation</a>
        }
        <li><a @onclick="()=> displayType = DisplayType.DeleteTask">Delete</a></li>
        @if (displayType == DisplayType.DeleteTask)
        {
            <div>
                <a @onclick="DeleteTask">Confirm Deletion</a>
            </div>
        }        
    </ul>
    <h4>Defer To</h4>
    <ul>
        <li><a @onclick="()=> DeferTo(1)">Tomorrow</a></li>
        <li><a @onclick="()=> DeferTo(2)">@date.PlusDays(2).ToString("dddd",null)</a></li>
        <li><a @onclick="()=> DeferTo(3)">@date.PlusDays(3).ToString("dddd",null)</a></li>
        <li><a @onclick="()=> DeferTo(4)">@date.PlusDays(4).ToString("dddd",null)</a></li>
        <li><a @onclick="()=> DeferTo(5)">@date.PlusDays(5).ToString("dddd",null)</a></li>
        <li><a @onclick="()=> DeferTo(6)">@date.PlusDays(6).ToString("dddd",null)</a></li>
        <li><a @onclick="()=> DeferTo(7)">@date.PlusDays(7).ToString("dddd",null)</a></li>
        <li><a @onclick="DeferToDate">Another Date</a></li>
    </ul>
    <h4>Task Priority</h4>
    <ul>
        @foreach (var priority in dailyList.CreatePriorityMenu())
        {
            <li><a @onclick="()=>SetPriority(priority)">@priority.Display</a></li>
        }
    </ul> 
}
@code {

    [Parameter]
    public string DateString { get; set; } = "";

    [Parameter]
    public string KeyString { get; set; } = "";

    private LocalDate date;
    private DisplayType displayType;
    private IListPendingCompletion<PlannerTask>? dailyList;
    private PlannerTask? plannerTask;

    protected override async Task OnInitializedAsync()
    {
        if (!(TimeOperations.TryParseLocalDate(DateString, out date) &&
              Guid.TryParse(KeyString, out var key)))
        {
            throw new InvalidOperationException("wrong params");
        }
        dailyList = taskStore.ItemsForDate(date);
        await dailyList.CompleteList();
        plannerTask = dailyList.FirstOrDefault(i => i.Key == key);
    }

    private void SetTaskStatus(PlannerTaskStatus newStatus)
    {
        if (plannerTask == null) return;
        plannerTask.Status = newStatus;
        navigation.ToPlannerPage(date);
    }

    private void DeferTo(int offset) => DeferTo(date.PlusDays(offset));

    private void DeferTo(LocalDate newDate)
    {
        taskStore.DeferToDate(plannerTask ?? new PlannerTask(), newDate);
        navigation.ToPlannerPage(date);
    }

    private void DeferToDate() => ModalService.Show<PickDate>("Defer Task To", ("BaseDate", date),
        ("PickAction", (Action<LocalDate>)DeferTo));

    private void SetPriority(PriorityKey priorityKey)
    {
        if (dailyList != null  && plannerTask != null)
        {
            dailyList.ChangeTaskPriority(plannerTask, priorityKey.Priority, priorityKey.Order);
        }
        navigation.ToPlannerPage(date);
    }

    private void DeleteTask()
    {
        if (dailyList != null  && plannerTask != null)
        {
            dailyList.Remove(plannerTask);
        }
        navigation.ToPlannerPage(date);
    }

    private enum DisplayType
    {
        Standard,
        Delegation,
        DeleteTask
    }
}